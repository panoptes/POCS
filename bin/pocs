#!/bin/bash -ie

usage() {
  echo -n "##################################################
# Start POCS via Docker.
#
##################################################

 $ $(basename $0) [COMMAND]

 Options:
  COMMAND 	These options are passed at the end of the docker-compose command.
  			To start all service simply pass 'up'.

 Examples:

	# Start all services in the foreground.
	$POCS/scripts/pocs-docker.sh up

 	# Start config-server and messaging-hub serivces in the background.
	$POCS/scripts/pocs-docker.sh up --no-deps -d config-server messaging-hub

 	# Read the logs from the config-server
	$POCS/scripts/pocs-docker.sh logs config-server

    # Run the software tests (no hardware)
    $POCS/scripts/pocs-docker.sh up
"
}

START=${1:-help}
if [ "${START}" = 'help' ] || [ "${START}" = '-h' ] || [ "${START}" = '--help' ]; then
	usage
	exit 1
fi

#Array storing container names
docker_names=("pocs-shell" "peas-shell" "messaging-hub" "config-server" "aag-weather-reader" "aag-weather-server")

let counter=6
#While loop that checks to see if any docker containers are running
while [ "${counter}" > 0 ]
do
        element=$(($counter - 1))
        DOCKER_NAME=${docker_names[$element]}
	#If running
        if [ "$(docker ps -q -f name=${DOCKER_NAME})" ]; then
                echo "At least one docker container is already running! Manually kill docker containers with docker kill <container name> if needed."
                exit 1
	#if not running
        else
	#I placed this in an else statement instead of keeping it outside the while loop since I was running into an 
	#error where the while loop exits the bash script and stops the containers from stopping.
                cd /var/panoptes
                docker-compose \
                   --project-directory "${PANDIR}" \
                        -f panoptes-utils/docker/docker-compose.yaml \
                        -f PAWS/docker/docker-compose.yaml \
                        -f POCS/docker/docker-compose.yaml \
                        -p panoptes "$@"
                exit
        fi
        let counter=$counter-1
done
