#!/usr/bin/env python3
import cmd
import readline
import subprocess
import time

from astropy.utils import console

from pocs.utils import error
from pocs.utils.messaging import PanMessaging


class PocsShell(cmd.Cmd):
    """ A simple command loop for running the PANOPTES Observatory Control System """
    intro = 'Welcome to POCS Shell! Type ? for help'
    prompt = 'POCS > '
    cmd_publisher = None
    procs = dict()

    msg_subscriber = None
    cmd_publisher = None

    cmd_pub_port = 6500
    cmd_sub_port = 6501
    msg_pub_port = 6510
    msg_sub_port = 6511

    def do_start_messaging(self, *arg):
        """ Starts the messaging system for the POCS ecosystem

        This starts both a command forwarder and a message forwarder as separate
        processes.

        The command forwarder has the pocs_shell and PAWS as PUBlishers and POCS
        itself as a SUBscriber to those commands

        The message forwarder has POCS as a PUBlisher and the pocs_shell and PAWS
        as SUBscribers to those messages

        Arguments:
            *arg {str} -- Unused
        """
        print_info("Starting messaging")

        for forwarder in ['cmd_forwarder', 'msg_forwarder']:
            script_path = '{}/bin/start_{}'.format(os.getenv('POCS'), forwarder)
            run_cmd = [script_path]

            try:
                self.procs[forwarder] = subprocess.Popen(run_cmd)
            except error.InvalidCommand as e:
                print_error(e)

            if self.procs[forwarder]:
                print_info("{} started with PID {}".format(forwarder, self.procs[forwarder].pid))

        # Let the forwarding devices start
        time.sleep(2)

        # Send commands to POCS via this publisher
        self.cmd_publisher = PanMessaging('publisher', self.cmd_pub_port)

        # Receive messages from POCS via this subscriber
        self.msg_subscriber = PanMessaging('subscriber', self.msg_sub_port)

    def do_start_pocs(self, *arg):
        """ Make POCS `run` in a separate process

        Note:
            Run with `--simulator=all` for simulator

        Arguments:
            *arg {str} -- Can pass arguments through to `do_connect`
        """
        print_info("Starting POCS")

        script_path = '{}/bin/pocs'.format(os.getenv('POCS'))
        run_cmd = [script_path]
        if arg[0] > '':
            run_cmd.extend(arg)

        try:
            self.procs['pocs'] = subprocess.Popen(run_cmd, stdout=subprocess.DEVNULL,
                                                  stderr=subprocess.DEVNULL, universal_newlines=True)
        except error.InvalidCommand as e:
            console.color_print(e, 'red')

        if self.procs['pocs']:
            print_info("POCS started with PID {}".format(self.procs['pocs'].pid))

    # def do_move_mount(self, direction, seconds):
    #     """ Move the mount

    #     Moves mount for number of `seconds` in given `direction`

    #     Note:
    #         This does no error checking and there are no limit switches to avoid
    #         mount collision with the pier. Use with caution and while viewing
    #         mount movement.

    #     Arguments:
    #         direction {str} -- One of 'north', 'south', 'east', 'west'
    #         seconds {float} -- Number of seconds to move mount
    #     """
    #     self.pocs.observatory.mount.move_direction(direction=direction, seconds=seconds)

    # def do_status(self, *arg):
    #     """ Show system status

    #     This will show the current state of the observatory, including the
    #     mount, state machine, etc.

    #     Arguments:
    #         *arg {str} -- Unused for now but accepts args
    #     """
    #     if self.pocs:
    #         status = self.pocs.status()
    #         pprint(status)
    #     else:
    #         print("POCS has not been connected yet")

    def do_pocs_command(self, cmd):
        """ Send a message to POCS instance

        Arguments:
            cmd {str} -- Command to be sent
        """
        if self.cmd_publisher:
            self.cmd_publisher.send_message('POCS', cmd)
        else:
            print_warning("Messaging has not been started")

    # def do_start_paws_listener(self, *arg):
    #     """ Listen for messages from PAWS

    #     Note:
    #         This is not used on the PAWS side as of right now as we don't want to
    #         allow web based control

    #     Arguments:
    #         *arg {str} -- Unused for now
    #     """
    #     if self.paws_listener is None:
    #         print("Starting PAWS listener")
    #         self.paws_listener = self.message_publisher.register_listener(channel='PAWS', port=6502, connect=True)

    #         def get_msg(socket, pocs):
    #             while True:
    #                 msg_type, msg = socket.recv_string().split(' ', maxsplit=1)
    #                 if msg == 'get_status':
    #                     print("PAWS asked for status")
    #                     pocs.do_status()
    #                 else:
    #                     print("Message from PAWS: {} {}".format(msg_type, msg))

    #                 time.sleep(1)

    #         self.procs['paws_listener'] = Process(target=get_msg, args=(self.paws_listener, self.pocs, ))
    #         self.procs['paws_listener'].start()
    #     else:
    #         print("Listener running with PID: {}".format(self.procs['paws_listener'].pid))

    # def do_list_cameras(self, *arg):
    #     """ List connected cameras

    #     This will show the cameras that are connected and whether they are
    #     primary, guide, etc.

    #     Arguments:
    #         *arg {str} -- Unused for now
    #     """
    #     if self.pocs:
    #         for cam_name, cam in self.pocs.observatory.cameras.items():
    #             print("Name:\t", cam_name)
    #             print("UID:\t", cam.uid)
    #             print("Primary:", cam.is_primary)
    #             print("Guide:\t", cam.is_guide)
    #             print("Port:\t", cam.port)
    #             print("")
    #     else:
    #         print("POCS has not been connected yet")

    def do_exit(self, *arg):
        """ Exits PanShell """
        for name, proc in self.procs.items():
            print_warning("Shutting down {}".format(name))
            # proc.join(10)
            # if proc.is_alive():
            proc.terminate()

        print_info("Bye! Thanks!")
        return True

    def emptyline(self):
        pass
        # self.do_status()


##################################################################################################
# Private Methods
##################################################################################################

##################################################################################################
# Utility Methods
##################################################################################################


def print_info(msg):
    console.color_print(msg, 'lightgreen')


def print_warning(msg):
    console.color_print(msg, 'yellow')


def print_error(msg):
    console.color_print(msg, 'red')


if __name__ == '__main__':
    import os
    import sys

    if not os.getenv('POCS'):
        sys.exit("Please set the POCS environment variable.")

    PocsShell().cmdloop()
