#!/usr/bin/env python3
import cmd
import readline
import subprocess
import time

from astropy.utils import console

from pocs.utils import error
from pocs.utils.messaging import PanMessaging


class PocsShell(cmd.Cmd):

    """ A simple command loop for running the PANOPTES Observatory Control System """
    intro = 'Welcome to POCS Shell! Type ? for help'
    prompt = 'POCS > '
    cmd_publisher = None
    procs = dict()

    msg_subscriber = None
    cmd_publisher = None

    cmd_pub_port = 6500
    cmd_sub_port = 6501
    msg_pub_port = 6510
    msg_sub_port = 6511

    def do_start_messaging(self, *arg):
        """ Starts the messaging system for the POCS ecosystem

        This starts both a command forwarder and a message forwarder as separate
        processes.

        The command forwarder has the pocs_shell and PAWS as PUBlishers and POCS
        itself as a SUBscriber to those commands

        The message forwarder has POCS as a PUBlisher and the pocs_shell and PAWS
        as SUBscribers to those messages

        Arguments:
            *arg {str} -- Unused
        """
        print_info("Starting messaging")

        for forwarder in ['cmd_forwarder', 'msg_forwarder']:
            script_path = '{}/bin/start_{}'.format(os.getenv('POCS'), forwarder)
            run_cmd = [script_path]

            try:
                self.procs[forwarder] = subprocess.Popen(run_cmd)
            except error.InvalidCommand as e:
                print_error(e)

            if self.procs[forwarder]:
                print_info("{} started with PID {}".format(forwarder, self.procs[forwarder].pid))

        # Let the forwarding devices start
        time.sleep(2)

        # Send commands to POCS via this publisher
        self.cmd_publisher = PanMessaging('publisher', self.cmd_pub_port)

        # Receive messages from POCS via this subscriber
        self.msg_subscriber = PanMessaging('subscriber', self.msg_sub_port)

    def do_start_pocs(self, *arg):
        """ Make POCS `run` in a separate process

        Note:
            Run with `--simulator=all` for simulator

        Arguments:
            *arg {str} -- Can pass arguments through to `do_connect`
        """
        print_info("Starting POCS")

        script_path = '{}/bin/pocs'.format(os.getenv('POCS'))
        run_cmd = [script_path]
        if arg[0] > '':
            run_cmd.extend(arg)

        try:
            self.procs['pocs'] = subprocess.Popen(run_cmd, stdout=subprocess.DEVNULL,
                                                  stderr=subprocess.DEVNULL, universal_newlines=True)
        except error.InvalidCommand as e:
            console.color_print(e, 'red')

        if self.procs['pocs']:
            print_info("POCS started with PID {}".format(self.procs['pocs'].pid))

    def do_pocs_command(self, cmd):
        """ Send a message to POCS instance

        Arguments:
            cmd {str} -- Command to be sent
        """
        self.cmd_publisher.send_message('POCS', cmd)

    def do_exit(self, *arg):
        """ Exits PanShell """
        for name, proc in self.procs.items():
            print_warning("Shutting down {}".format(name))
            proc.terminate()

        print_info("Bye! Thanks!")
        return True

    def emptyline(self):
        pass
        # self.do_status()


##################################################################################################
# Private Methods
##################################################################################################

##################################################################################################
# Utility Methods
##################################################################################################


def print_info(msg):
    console.color_print(msg, 'lightgreen')


def print_warning(msg):
    console.color_print(msg, 'yellow')


def print_error(msg):
    console.color_print(msg, 'red')


if __name__ == '__main__':
    import os
    import sys

    if not os.getenv('POCS'):
        sys.exit("Please set the POCS environment variable.")

    PocsShell().cmdloop()
