#!/usr/bin/env python3
import cmd
import readline
import subprocess
import time

from astropy.utils import console

from pocs import POCS
from pocs.utils import current_time
from pocs.utils import error
from pocs.utils import listify
from pocs.utils.messaging import PanMessaging


class PocsShell(cmd.Cmd):

    """ A simple command loop for running the PANOPTES Observatory Control System """
    intro = 'Welcome to POCS Shell! Type ? for help'
    prompt = 'POCS > '
    procs = dict()

    _running = False

    msg_subscriber = None
    msg_publisher = None
    cmd_publisher = None

    cmd_pub_port = 6500
    msg_pub_port = 6510
    msg_sub_port = 6511

    def do_drift_align(self, *arg):
        """Enter the drift alignment shell """
        print_info('*' * 80)
        i = DriftShell()
        i.cmdloop()

    def do_start_messaging(self, *arg):
        """ Starts the messaging system for the POCS ecosystem

        This starts both a command forwarder and a message forwarder as separate
        processes.

        The command forwarder has the pocs_shell and PAWS as PUBlishers and POCS
        itself as a SUBscriber to those commands

        The message forwarder has POCS as a PUBlisher and the pocs_shell and PAWS
        as SUBscribers to those messages

        Arguments:
            *arg {str} -- Unused
        """
        print_info("Starting messaging")

        # Send commands to POCS via this publisher
        self.cmd_publisher = PanMessaging('publisher', self.cmd_pub_port)

        # Receive messages from POCS via this subscriber
        self.msg_subscriber = PanMessaging('subscriber', self.msg_sub_port)

        # Send messages to PAWS
        self.msg_publisher = PanMessaging('publisher', self.msg_pub_port)

    def do_start_pocs(self, *arg):
        """ Make POCS `run` in a separate process

        Note:
            Run with `--simulator=all` for simulator

        Arguments:
            *arg {str} -- Can pass arguments through to `do_connect`
        """
        self.do_start_messaging()
        print_info("Starting POCS")

        script_path = '{}/bin/pocs'.format(os.getenv('POCS'))
        run_cmd = [script_path]
        if arg[0] > '':
            run_cmd.extend(arg)

        try:
            self.procs['pocs'] = subprocess.Popen(run_cmd, stdout=subprocess.DEVNULL,
                                                  stderr=subprocess.DEVNULL, universal_newlines=True)
        except error.InvalidCommand as e:
            console.color_print(e, 'red')

        if self.procs['pocs']:
            print_info("POCS started with PID {}".format(self.procs['pocs'].pid))
            self._running = True

    def do_stop_pocs(self, *arg):
        """ Send a shutdown message to POCS """
        try:
            self.cmd_publisher.send_message('POCS-CMD', 'shutdown')
            print_warning('Stopping POCS (this can take up to two minutes - {})'.format(current_time()))

            try:
                self.procs['pocs'].wait(timeout=120)
            except subprocess.TimeoutExpired:
                print_error("POCS process hasn't stopped, terminating")
                self.procs['pocs'].terminate()

            self._running = False
        except AttributeError:
            print_info('Messaging not started')

    def do_pocs_command(self, cmd):
        """ Send a command to POCS instance

        Arguments:
            cmd {str} -- Command to be sent
        """
        try:
            self.cmd_publisher.send_message('POCS-CMD', cmd)
        except AttributeError:
            print_info('Messaging not started')

    def do_pocs_message(self, cmd):
        """ Send a message to PAWS and other listeners

        Arguments:
            cmd {str} -- Command to be sent
        """
        try:
            self.msg_publisher.send_message('POCS-SHELL', cmd)
        except AttributeError:
            print_info('Messaging not started')

    def do_exit(self, *arg):
        """ Exits PanShell """
        if self._running:
            self.do_stop_pocs()

        for name, proc in self.procs.items():
            rc = proc.poll()
            if rc is None:
                print_warning("Shutting down {}".format(name))
                proc.terminate()

        print_info("Bye! Thanks!")
        return True

    def emptyline(self):
        pass


##################################################################################################
# Private Methods
##################################################################################################

##################################################################################################
# Utility Methods
##################################################################################################


class DriftShell(cmd.Cmd):

    """ A simple command loop for running the PANOPTES Observatory Control System """
    intro = 'Drift alignment shell! Type ? for help or `exit` to leave drift alignment'
    prompt = 'POCS:DriftAlign > '

    pocs = None

    def do_setup_pocs(self, *arg):
        """ Setup and initialize a POCS instance """
        simulator = listify(arg[0].split('=')[-1])

        if simulator is None:
            simulator = []

        try:
            self.pocs = POCS(simulator=simulator)
            self.pocs.initialize()
        except error.PanError:
            pass

    def do_unpark(self, *arg):
        try:
            self.pocs.observatory.mount.unpark()
        except Exception as e:
            print_warning('Problem unparking: {}'.format(e))

    def do_go_home(self, *arg):
        """ Move the mount to home """
        try:
            self.pocs.observatory.mount.slew_to_home()
        except Exception as e:
            print_warning('Problem slewing to home: {}'.format(e))

    def do_power_down(self, *arg):
        print_info("Shutting down POCS instance, please wait")
        self.pocs.power_down()

        while self.pocs.observatory.mount.is_parked is False:
            print_info('.')
            time.sleep(5)

        self.pocs = None

    def do_exit(self, *arg):
        if self.pocs is not None:
            self.do_power_down()

        print_info('Leaving drift alignment')
        return True

    def emptyline(self):
        pass


def print_info(msg):
    console.color_print(msg, 'lightgreen')


def print_warning(msg):
    console.color_print(msg, 'yellow')


def print_error(msg):
    console.color_print(msg, 'red')


if __name__ == '__main__':
    import os
    import sys

    if not os.getenv('POCS'):
        sys.exit("Please set the POCS environment variable.")

    PocsShell().cmdloop()
