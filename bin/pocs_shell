#!/usr/bin/env python3
import os
import readline
import time
import zmq

from cmd import Cmd
from subprocess import TimeoutExpired
from pprint import pprint

from astropy import units as u
from astropy.coordinates import AltAz
from astropy.coordinates import ICRS
from astropy.utils import console

from pocs import hardware
from pocs.core import POCS
from pocs.observatory import Observatory
from pocs.camera import create_cameras_from_config
from pocs.scheduler.field import Field
from pocs.scheduler.observation import Observation
from pocs.utils import current_time
from pocs.utils import error
from pocs.utils import images as img_utils
from pocs.utils.images import fits as fits_utils
from pocs.utils.images import cr2 as cr2_utils
from pocs.utils.images import polar_alignment as polar_alignment_utils
from pocs.utils import listify
from pocs.utils.database import PanDB
from pocs.utils.messaging import PanMessaging


class PocsShell(Cmd):
    """A simple command loop for running the PANOPTES Observatory Control System."""

    intro = 'Welcome to POCS Shell! Type ? for help'
    prompt = 'POCS > '
    procs = dict()
    pocs = None

    _running = False

    msg_subscriber = None
    msg_publisher = None
    cmd_publisher = None

    cmd_pub_port = 6500
    cmd_sub_port = 6501
    msg_pub_port = 6510
    msg_sub_port = 6511

    @property
    def is_setup(self):
        """True if POCS is setup, False otherwise."""
        if self.pocs is None:
            print_warning('POCS has not been setup. Please run `setup_pocs`')
            return False
        return True

    @property
    def is_safe(self):
        """True if POCS is setup and weather conditions are safe, False otherwise."""
        return self.is_setup and self.pocs.is_safe()

    @property
    def ready(self):
        """True if POCS is ready to observe, False otherwise."""
        if not self.is_setup:
            return False

        if self.pocs.observatory.mount.is_parked:
            print_warning('Mount is parked. To unpark run `unpark`')
            return False

        return self.pocs.is_safe()

    def do_display_config(self, *arg):
        """ Display the config file for POCS """
        try:
            if self.pocs and self.pocs.config:
                pprint(self.pocs.config)
            else:
                print_warning("No config file for POCS.")

        except AttributeError:
            print_warning("Please run `setup_pocs` before trying to run `display_config`")

    def do_drift_align(self, *arg):
        """Enter the drift alignment shell."""
        self.do_reset_pocs()
        print_info('*' * 80)
        i = DriftShell()
        i.cmdloop()

    def do_start_messaging(self, *arg):
        """Starts the messaging system for the POCS ecosystem.

        This starts both a command forwarder and a message forwarder as separate
        processes.

        The command forwarder has the pocs_shell and PAWS as PUBlishers and POCS
        itself as a SUBscriber to those commands

        The message forwarder has POCS as a PUBlisher and the pocs_shell and PAWS
        as SUBscribers to those messages

        Arguments:
            *arg {str} -- Unused
        """
        print_info("Starting messaging")

        # Send commands to POCS via this publisher
        try:
            self.cmd_publisher = PanMessaging.create_publisher(
                self.cmd_pub_port)
            print_info("Command publisher started on port {}".format(
                self.cmd_pub_port))
        except Exception as e:
            print_warning("Can't start command publisher: {}".format(e))

        try:
            self.cmd_subscriber = PanMessaging.create_subscriber(
                self.cmd_sub_port)
            print_info("Command subscriber started on port {}".format(
                self.cmd_sub_port))
        except Exception as e:
            print_warning("Can't start command subscriber: {}".format(e))

        # Receive messages from POCS via this subscriber
        try:
            self.msg_subscriber = PanMessaging.create_subscriber(
                self.msg_sub_port)
            print_info("Message subscriber started on port {}".format(
                self.msg_sub_port))
        except Exception as e:
            print_warning("Can't start message subscriber: {}".format(e))

        # Send messages to PAWS
        try:
            self.msg_publisher = PanMessaging.create_publisher(
                self.msg_pub_port)
            print_info("Message publisher started on port {}".format(
                self.msg_pub_port))
        except Exception as e:
            print_warning("Can't start message publisher: {}".format(e))

    def do_setup_pocs(self, *arg):
        """Setup and initialize a POCS instance."""
        simulator = listify(arg[0].split())

        if simulator is None:
            simulator = []

        try:
            cameras = create_cameras_from_config()
            observatory = Observatory(simulator=simulator, cameras=cameras)
            self.pocs = POCS(observatory, messaging=True)
            self.pocs.initialize()
        except error.PanError:
            pass

    def help_setup_pocs(self):
        print('''Setup and initialize a POCS instance.

    setup_pocs [simulate]

simulate is a space-separated list of hardware to simulate.
Hardware names: {}   (or all for all hardware)'''.format(
            ','.join(hardware.get_all_names())))

    def complete_setup_pocs(self, text, line, begidx, endidx):
        """Provide completions for simulator names."""
        names = ['all'] + hardware.get_all_names()
        return [name for name in names if name.startswith(text)]

    def do_reset_pocs(self, *arg):
        """Discards the POCS instance.

        Does NOT park the mount, nor execute power_down.
        """
        self.pocs = None

    def do_run_pocs(self, *arg):
        """Make POCS `run` the state machine.

        Continues until the user presses Ctrl-C or the state machine
        exits, such as due to an error."""
        if self.pocs is not None:
            if self.msg_subscriber is None:
                self.do_start_messaging()

            print_info("Starting POCS - Press Ctrl-c to interrupt")

            try:
                self.pocs.run()
            except KeyboardInterrupt:
                print_warning('POCS interrupted, parking')
                if self.pocs.state not in ['sleeping', 'housekeeping', 'parked', 'parking']:
                    self.pocs.park()
                else:
                    self.pocs.observatory.mount.home_and_park()
                self._obs_run_retries = 0  # Don't retry
            finally:
                print_info('POCS stopped.')
        else:
            print_warning('Please run `setup_pocs` before trying to run')

    def do_collect_status(self, *arg):
        """Just records the `status` for pocs.

        This would mostly be used when you want to record information from
        POCS but might be driving the system manually

        """
        if self.pocs is not None:
            if self.msg_subscriber is None:
                self.do_start_messaging()

            print_info("Recording POCS status - Press Ctrl-c to interrupt")

            _keep_going = True
            while _keep_going:
                try:
                    status = self.pocs.status()
                    pprint(status)
                    print_info('*' * 80)
                    self.pocs.db.insert_current('system', status, store_permanently=False)
                    time.sleep(2)
                except KeyboardInterrupt:
                    print_warning('Stopping collection')
                    _keep_going = False
        else:
            print_warning('Please run `setup_pocs` before trying to run')

    def do_pocs_command(self, cmd):
        """Send a command to POCS instance.

        Arguments:
            cmd {str} -- Command to be sent
        """
        try:
            self.cmd_publisher.send_message('POCS-CMD', cmd)
        except AttributeError:
            print_info('Messaging not started')

    def do_pocs_message(self, cmd):
        """Send a message to PAWS and other listeners.

        Arguments:
            cmd {str} -- Command to be sent
        """
        try:
            self.msg_publisher.send_message('POCS-SHELL', cmd)
        except AttributeError:
            print_info('Messaging not started')

    def do_exit(self, *arg):
        """Exits PocsShell."""
        if self.pocs is not None:
            self.do_power_down()

        print_info("Bye! Thanks!")
        return True

    def emptyline(self):
        """Do nothing.

        Without this, Cmd would repeat the last command."""
        pass

    def do_unpark(self, *arg):
        """Release the mount so that it can be moved."""
        try:
            self.pocs.observatory.mount.unpark()
            self.pocs.say("Unparking mount")
        except Exception as e:
            print_warning('Problem unparking: {}'.format(e))

    def do_park(self, *arg):
        """Park the mount."""
        try:
            self.pocs.observatory.mount.park()
            self.pocs.say("Mount parked")
        except Exception as e:
            print_warning('Problem parking: {}'.format(e))

    def do_go_home(self, *arg):
        """Move the mount to home."""
        if self.ready is False:
            if self.pocs.is_weather_safe() is False:
                self.do_power_down()

            return

        try:
            self.pocs.observatory.mount.slew_to_home()
        except Exception as e:
            print_warning('Problem slewing to home: {}'.format(e))

    def do_open_dome(self, *arg):
        """Open the dome, if there is one."""
        if not self.is_setup:
            return
        if not self.pocs.observatory.has_dome:
            print_warning('There is no dome.')
            return
        if not self.pocs.is_weather_safe():
            print_warning('Weather conditions are not good, not opening dome.')
            return
        try:
            if self.pocs.observatory.open_dome():
                print_info('Opened the dome.')
            else:
                print_warning('Failed to open the dome.')
        except Exception as e:
            print_warning('Problem opening the dome: {}'.format(e))

    def do_close_dome(self, *arg):
        """Close the dome, if there is one."""
        if not self.is_setup:
            return
        if not self.pocs.observatory.has_dome:
            print_warning('There is no dome.')
            return
        try:
            if self.pocs.observatory.close_dome():
                print_info('Closed the dome.')
            else:
                print_warning('Failed to close the dome.')
        except Exception as e:
            print_warning('Problem closing the dome: {}'.format(e))

    def do_power_down(self, *arg):
        """Power down the mount; waits until the mount is parked."""
        print_info("Shutting down POCS instance, please wait")
        self.pocs.power_down()

        while self.pocs.observatory.mount.is_parked is False:
            print_info('.')
            time.sleep(5)

        self.pocs = None

    def do_polar_alignment_test(self, *arg):
        """Capture images of the pole and compute alignment of mount."""
        if self.ready is False:
            return

        start_time = current_time(flatten=True)

        base_dir = '{}/images/drift_align/{}'.format(
            os.getenv('PANDIR'), start_time)
        plot_fn = '{}/{}_center_overlay.jpg'.format(base_dir, start_time)

        mount = self.pocs.observatory.mount

        print_info("Moving to home position")
        self.pocs.say("Moving to home position")
        mount.slew_to_home()

        # Polar Rotation
        pole_fn = polar_rotation(self.pocs, base_dir=base_dir)
        pole_fn = pole_fn.replace('.cr2', '.fits')

        # Mount Rotation
        rotate_fn = mount_rotation(self.pocs, base_dir=base_dir)
        rotate_fn = rotate_fn.replace('.cr2', '.fits')

        print_info("Moving back to home")
        self.pocs.say("Moving back to home")
        mount.slew_to_home()

        print_info("Solving celestial pole image")
        self.pocs.say("Solving celestial pole image")
        try:
            pole_center = polar_alignment_utils.analyze_polar_rotation(pole_fn)
        except error.SolveError:
            print_warning("Unable to solve pole image.")
            print_warning("Will proceeed with rotation image but analysis not possible")
            pole_center = None
        else:
            pole_center = (float(pole_center[0]), float(pole_center[1]))

        print_info("Starting analysis of rotation image")
        self.pocs.say("Starting analysis of rotation image")
        try:
            rotate_center = polar_alignment_utils.analyze_ra_rotation(rotate_fn)
        except Exception:
            print_warning("Unable to process rotation image")
            rotate_center = None

        if pole_center is not None and rotate_center is not None:
            print_info("Plotting centers")
            self.pocs.say("Plotting centers")

            print_info("Pole: {} {}".format(pole_center, pole_fn))
            self.pocs.say("Pole  : {:0.2f} x {:0.2f}".format(
                pole_center[0], pole_center[1]))

            print_info("Rotate: {} {}".format(rotate_center, rotate_fn))
            self.pocs.say("Rotate: {:0.2f} x {:0.2f}".format(
                rotate_center[0], rotate_center[1]))

            d_x = pole_center[0] - rotate_center[0]
            d_y = pole_center[1] - rotate_center[1]

            self.pocs.say("d_x: {:0.2f}".format(d_x))
            self.pocs.say("d_y: {:0.2f}".format(d_y))

            fig = polar_alignment_utils.plot_center(
                pole_fn, rotate_fn, pole_center, rotate_center)

            print_info("Plot image: {}".format(plot_fn))
            fig.tight_layout()
            fig.savefig(plot_fn)

            try:
                os.unlink('/var/panoptes/images/latest.jpg')
            except Exception:
                pass
            try:
                os.symlink(plot_fn, '/var/panoptes/images/latest.jpg')
            except Exception:
                print_warning("Can't link latest image")

            with open('/var/panoptes/images/drift_align/center.txt'.format(base_dir), 'a') as f:
                f.write('{}.{},{},{},{},{},{}\n'.format(start_time, pole_center[0], pole_center[
                        1], rotate_center[0], rotate_center[1], d_x, d_y))

        print_info("Done with polar alignment test")
        self.pocs.say("Done with polar alignment test")

    def do_web_listen(self, *arg):
        """Goes into a loop listening for commands from PAWS."""

        if not hasattr(self, 'cmd_subscriber'):
            self.do_start_messaging()

        self.pocs.say("Now listening for commands from PAWS")

        poller = zmq.Poller()
        poller.register(self.cmd_subscriber.socket, zmq.POLLIN)

        command_lookup = {
            'polar_alignment': self.do_polar_alignment_test,
            'park': self.do_park,
            'unpark': self.do_unpark,
            'home': self.do_go_home,
        }

        try:
            while True:
                # Poll for messages
                sockets = dict(poller.poll(500))  # 500 ms timeout

                if self.cmd_subscriber.socket in sockets and \
                        sockets[self.cmd_subscriber.socket] == zmq.POLLIN:

                    topic, msg_obj = self.cmd_subscriber.receive_message(
                        flags=zmq.NOBLOCK)
                    print_info("{} {}".format(topic, msg_obj))

                    # Put the message in a queue to be processed
                    if topic == 'PAWS-CMD':
                        try:
                            print_info("Command received: {}".format(
                                msg_obj['message']))
                            cmd = command_lookup[msg_obj['message']]
                            cmd()
                        except KeyError:
                            pass
                        except Exception as e:
                            print_warning(
                                "Can't perform command: {}".format(e))

                time.sleep(1)
        except KeyboardInterrupt:
            self.pocs.say("No longer listening to PAWS")
            pass


##########################################################################
# Private Methods
##########################################################################

##########################################################################
# Utility Methods
##########################################################################

def polar_rotation(pocs, exp_time=30, base_dir=None, **kwargs):
    assert base_dir is not None, print_warning("base_dir cannot be empty")

    mount = pocs.observatory.mount

    print_info('Performing polar rotation test')
    pocs.say('Performing polar rotation test')
    mount.slew_to_home()

    while not mount.is_home:
        time.sleep(2)

    analyze_fn = None

    print_info('At home position, taking {} sec exposure'.format(exp_time))
    pocs.say('At home position, taking {} sec exposure'.format(exp_time))
    procs = dict()
    for cam_name, cam in pocs.observatory.cameras.items():
        fn = '{}/pole_{}.cr2'.format(base_dir, cam_name.lower())
        proc = cam.take_exposure(seconds=exp_time, filename=fn)
        procs[fn] = proc
        if cam.is_primary:
            analyze_fn = fn

    for fn, proc in procs.items():
        try:
            outs, errs = proc.communicate(timeout=(exp_time + 15))
        except AttributeError:
            continue
        except KeyboardInterrupt:
            print_warning('Pole test interrupted')
            proc.kill()
            outs, errs = proc.communicate()
            break
        except TimeoutExpired:
            proc.kill()
            outs, errs = proc.communicate()
            break

        time.sleep(2)
        try:
            img_utils.make_pretty_image(
                fn, title='Alignment Test - Celestial Pole', primary=True)
            cr2_utils.cr2_to_fits(fn, remove_cr2=True)
        except AssertionError:
            print_warning("Can't make image for {}".format(fn))
            pocs.say("Can't make image for {}".format(fn))

    return analyze_fn


def mount_rotation(pocs, base_dir=None, include_west=False, **kwargs):
    mount = pocs.observatory.mount

    print_info("Doing rotation test")
    pocs.say("Doing rotation test")
    mount.slew_to_home()
    exp_time = 25
    mount.move_direction(direction='west', seconds=11)

    rotate_fn = None

    # Start exposing on cameras
    for direction in ['east', 'west']:
        if include_west is False and direction == 'west':
            continue

        print_info("Rotating to {}".format(direction))
        pocs.say("Rotating to {}".format(direction))
        procs = dict()
        for cam_name, cam in pocs.observatory.cameras.items():
            fn = '{}/rotation_{}_{}.cr2'.format(base_dir,
                                                direction, cam_name.lower())
            proc = cam.take_exposure(seconds=exp_time, filename=fn)
            procs[fn] = proc
            if cam.is_primary:
                rotate_fn = fn

        # Move mount
        mount.move_direction(direction=direction, seconds=21)

        # Get exposures
        for fn, proc in procs.items():
            try:
                outs, errs = proc.communicate(timeout=(exp_time + 15))
            except AttributeError:
                continue
            except KeyboardInterrupt:
                print_warning('Pole test interrupted')
                pocs.say('Pole test interrupted')
                proc.kill()
                outs, errs = proc.communicate()
                break
            except TimeoutExpired:
                proc.kill()
                outs, errs = proc.communicate()
                break

            time.sleep(2)
            try:
                img_utils.make_pretty_image(
                    fn, title='Alignment Test - Rotate {}'.format(direction), primary=True)
                cr2_utils.cr2_to_fits(fn, remove_cr2=True)
            except AssertionError:
                print_warning("Can't make image for {}".format(fn))
                pocs.say("Can't make image for {}".format(fn))

    return rotate_fn


class DriftShell(Cmd):
    intro = 'Drift alignment shell! Type ? for help or `exit` to leave drift alignment.'
    prompt = 'POCS:DriftAlign > '

    pocs = None
    base_dir = '{}/images/drift_align'.format(os.getenv('PANDIR'))

    num_pics = 40
    exp_time = 30

    # Coordinates for different tests
    coords = {
        'alt_east': (30, 102),
        'alt_west': (20, 262.5),
        'az_east': (70.47, 170),
        'az_west': (70.47, 180),
    }

    @property
    def ready(self):
        if self.pocs is None:
            print_warning('POCS has not been setup. Please run `setup_pocs`')
            return False

        if self.pocs.observatory.mount.is_parked:
            print_warning('Mount is parked. To unpark run `unpark`')
            return False

        return self.pocs.is_safe()

    def do_setup_pocs(self, *arg):
        """Setup and initialize a POCS instance."""
        args, kwargs = parse_options(*arg)
        simulator = kwargs.get('simulator', [])
        print_info("Simulator: {}".format(simulator))

        try:
            self.pocs = POCS(simulator=simulator)
            self.pocs.initialize()
        except error.PanError:
            pass

    def do_drift_test(self, *arg):
        if self.ready is False:
            return

        args, kwargs = parse_options(*arg)

        try:
            direction = kwargs['direction']
            num_pics = int(kwargs['num_pics'])
            exp_time = float(kwargs['exp_time'])
        except Exception:
            print_warning(
                'Drift test requires three arguments: direction, num_pics, exp_time')
            return

        start_time = kwargs.get('start_time', current_time(flatten=True))

        print_info('{} drift test with {}x {}sec exposures'.format(
            direction.capitalize(), num_pics, exp_time))

        if direction:
            try:
                alt, az = self.coords.get(direction)
            except KeyError:
                print_error('Invalid direction given')
            else:
                location = self.pocs.observatory.observer.location
                obs = get_observation(
                    alt=alt,
                    az=az,
                    loc=location,
                    num_exp=num_pics,
                    exp_time=exp_time,
                    name=direction
                )

                self.perform_test(obs, start_time=start_time)
                print_info('Test complete, slewing to home')
                self.do_go_home()
        else:
            print_warning('Must pass direction to test: alt_east, alt_west, az_east, az_west')

    def do_full_drift_test(self, *arg):
        if not self.ready:
            return

        args, kwargs = parse_options(*arg)

        num_pics = int(kwargs.get('num_pics', self.num_pics))
        exp_time = float(kwargs.get('exp_time', self.exp_time))

        print_info('Full drift test. Press Ctrl-c to interrupt')

        start_time = current_time(flatten=True)

        for direction in ['alt_east', 'az_east', 'alt_west', 'az_west']:
            if not self.ready:
                break

            print_info('Performing drift test: {}'.format(direction))
            try:
                self.do_drift_test('direction={} num_pics={} exp_time={} start_time={}'.format(
                    direction, num_pics, exp_time, start_time))
            except KeyboardInterrupt:
                print_warning('Drift test interrupted')
                break

        print_info('Slewing to home')
        self.do_go_home()

    def do_unpark(self, *arg):
        try:
            self.pocs.observatory.mount.unpark()
        except Exception as e:
            print_warning('Problem unparking: {}'.format(e))

    def do_go_home(self, *arg):
        """Move the mount to home."""
        if self.ready is False:
            if self.pocs.is_weather_safe() is False:
                self.do_power_down()

            return

        try:
            self.pocs.observatory.mount.slew_to_home()
        except Exception as e:
            print_warning('Problem slewing to home: {}'.format(e))

    def do_power_down(self, *arg):
        print_info("Shutting down POCS instance, please wait")
        self.pocs.power_down()

        while self.pocs.observatory.mount.is_parked is False:
            print_info('.')
            time.sleep(5)

        self.pocs = None

    def do_exit(self, *arg):
        if self.pocs is not None:
            self.do_power_down()

        print_info('Leaving drift alignment')
        return True

    def emptyline(self):
        if self.ready:
            print_info(self.pocs.status())

    def perform_test(self, observation, start_time=None):
        if start_time is None:
            start_time = current_time(flatten=True)

        mount = self.pocs.observatory.mount

        mount.set_target_coordinates(observation.field.coord)
        # print_info("Slewing to {}".format(coord))
        mount.slew_to_target()

        while mount.is_slewing:
            time.sleep(3)

        print_info('At destination, taking pics')

        for i in range(observation.min_nexp):

            if not self.ready:
                break

            headers = self.pocs.observatory.get_standard_headers(
                observation=observation)

            # All camera images share a similar start time
            headers['start_time'] = start_time

            print_info('\t{} of {}'.format(i, observation.min_nexp))

            events = []
            files = []
            for name, cam in self.pocs.observatory.cameras.items():
                fn = '{}/{}_{}_{}_{:02d}.cr2'.format(
                    self.base_dir, start_time, observation.field.field_name, name, i)
                cam_event = cam.take_observation(
                    observation, headers=headers, filename=fn)
                events.append(cam_event)
                files.append(fn.replace('.cr2', '.fits'))

            for e in events:
                while not e.is_set():
                    time.sleep(5)

            # while files:
            #     file = files.pop(0)
            #     process_img(file, start_time)


def process_img(fn, start_time, remove_after=True):
    # Unpack if already packed
    if fn.endswith('.fz'):
        fn = fits_utils.fpack(fn, unpack=True)

    if os.path.exists('{}.fz'.format(fn)):
        fn = fits_utils.fpack(fn.replace('.fits', '.fits.fz'), unpack=True)

    # Solve the field
    try:
        fits_utils.get_solve_field(fn)

        # Get header info
        header = fits_utils.getheader(fn)

        try:
            del header['COMMENT']
            del header['HISTORY']
        except Exception:
            pass

        db = PanDB()

        # Add to DB
        db.drift_align.insert_one({
            'data': header,
            'type': 'drift_align',
            'date': current_time(datetime=True),
            'start_time': start_time,
        })

        # Remove file
        if remove_after:
            try:
                os.remove(fn)
            except Exception as e:
                print_warning('Problem removing file: {}'.format(e))
    except Exception as e:
        print_warning('Problem with adding to mongo: {}'.format(e))


def get_observation(alt=None, az=None, loc=None, num_exp=25, exp_time=30 * u.second, name=None):
    assert alt is not None
    assert az is not None
    assert loc is not None

    coord = AltAz(az=az * u.deg, alt=alt * u.deg,
                  obstime=current_time(), location=loc).transform_to(ICRS)

    field = Field(name, coord)

    if not isinstance(exp_time, u.Quantity):
        exp_time *= u.second

    obs = Observation(field, exp_time=exp_time,
                      min_nexp=num_exp, exp_set_size=1)

    return obs


def print_info(msg):
    console.color_print(msg, 'lightgreen')


def print_warning(msg):
    console.color_print(msg, 'yellow')


def print_error(msg):
    console.color_print(msg, 'red')


def parse_options(opts):
    args = []
    kwargs = {}

    for opt in opts.split(' '):
        if '=' not in opt:
            args.append(opt)
        else:
            name, value = opt.split('=')
            name = name.replace('--', '')
            if name in kwargs:
                kwargs[name] = listify(kwargs[name])
                kwargs[name].append(value)
            else:
                kwargs[name] = value

    return args, kwargs


if __name__ == '__main__':
    import os
    import sys

    if not os.getenv('POCS'):
        sys.exit("Please set the POCS environment variable.")

    invoked_script = os.path.basename(sys.argv[0])
    histfile = os.path.expanduser('~/.{}_history'.format(invoked_script))
    histfile_size = 1000
    if os.path.exists(histfile):
        readline.read_history_file(histfile)

    PocsShell().cmdloop()

    readline.set_history_length(histfile_size)
    readline.write_history_file(histfile)
