#!/usr/bin/env python3

import argparse
import datetime
import os
import signal
import sys
import time

from astropy import units as u

from pocs.core import POCS

# Constants
park_ha = 290 * u.deg
flip_ha = 20 * u.deg
DAY, NIGHT = 1, 2

on_time = datetime.time(7, 30)       # Morning
off_time = datetime.time(18, 55)     # Night


def main():

    parser = argparse.ArgumentParser(
        description='Start the PANOPTES Imiloa demo unit.',
        epilog="Don't forget to set the $POCS environment variable."
    )
    parser.add_argument('--simulator', action="append", default=['weather', 'camera'],
                        help='Run the unit in simulator mode. Possible values are: all, mount, camera, weather, none')
    parser.add_argument('--move-speed', default=7, help='How fast the demo moves')
    parser.add_argument('--auto-detect', action='store_true', default=True,
                        help='Attempt to auto detect the camera ports, defaults to True.')

    args = parser.parse_args()
    _keep_looping = True

    # Create the unit and start up.
    pan = POCS(**vars(args))

    # Get the mount object
    mount = pan.observatory.mount
    mount.initialize(set_rates=False)
    mount.serial_query('set_button_moving_rate', args.move_speed)

    # Helper function to go place
    def goto(ha):
        mount.set_park_coordinates(ha=ha)
        mount.set_target_coordinates(mount._park_coordinates)
        mount.serial_query('park')
        while not mount.is_parked:
            time.sleep(0.5)

    def _sigint_handler():
        """
        Interrupt signal handler. Designed to intercept a Ctrl-C from
        the user and properly shut down the system.
        """
        try:
            goto(park_ha)
        except Exception as e:
            print("Problem shutting down: {}".format(e))
        finally:
            sys.exit(0)

    # This does one fake observation, including meridian flip, then returns
    def do_run():
        # Track
        goto(park_ha)
        mount.unpark()
        mount.move_direction('east', seconds=60)

        # Meridian flip
        goto(flip_ha)
        mount.unpark()
        mount.move_direction('east', seconds=50)

        goto(park_ha)

    # Interrupt
    signal.signal(signal.SIGINT, _sigint_handler)

    print("Looping")

    # Loop forever
    while _keep_looping:

        # Check if we should do run or not
        current_time = datetime.datetime.now().time()
        when, matching = check_time(current_time, on_time, off_time)

        if matching:
            if when == DAY:
                try:
                    do_run()
                except KeyboardInterrupt:
                    print("Exiting loop")
                    goto(park_ha)
                    break
                except Exception as e:
                    print("Problem on that loop. Sleep a bit then loop: {}".format(e))
                    time.sleep(30)
            elif when == NIGHT:
                print("Sleeping...")
                time.sleep(60 * 60)  # Sleep an hour


def check_time(time_to_check, on_time, off_time):
    """ Check if we are in out operating times

    Ripped from here and rearranged:
    http://stackoverflow.com/questions/20518122/python-working-out-if-time-now-is-between-two-times
    """
    if on_time > off_time:
        if time_to_check > on_time or time_to_check < off_time:
            return NIGHT, True
    elif on_time < off_time:
        if time_to_check > on_time and time_to_check < off_time:
            return DAY, True
    elif time_to_check == on_time:
        return None, True
    return None, False

if __name__ == '__main__':

    if not os.getenv('POCS'):
        sys.exit("Please set the POCS environment variable.")

    main()
