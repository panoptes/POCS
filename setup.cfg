[metadata]
name = panoptes-pocs
description = PANOPTES Observatory Control System
author = Project PANOPTES
author_email = developers@projectpanoptes.org
license = mit
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8
url = https://github.com/panoptes/POCS
project_urls =
    Documentation = https://panoptes-pocs.readthedocs.org
    Forum = https://forum.projectpanoptes.org
platforms = linux
classifiers =
    Development Status :: 4 - Beta
    Environment :: Console
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Operating System :: POSIX
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3 :: Only
    Topic :: Scientific/Engineering :: Astronomy
    Topic :: Scientific/Engineering :: Physics

[options]
zip_safe = False
include_package_data = True
package_dir =
    =src

# DON'T CHANGE THE FOLLOWING LINE! IT WILL BE UPDATED BY PYSCAFFOLD!

# Add here dependencies of your project (semicolon/line-separated), e.g.
install_requires =
    importlib-metadata; python_version<"3.8"
    astroplan
    astropy
    click>=7.1.2
    fastapi
    fastapi-utils
    numpy>=1.22
    panoptes-utils[config]>=0.2.40
    pandas
    Pillow>=9.2.0
    pyserial
    requests>=2.31.0
    sparklines
    transitions
    typer[all]
    urllib3>=1.26.5
    uvicorn[standard]
# The usage of test_requires is discouraged, see `Dependency Management` docs
# tests_require = pytest; pytest-cov
# Require a specific Python version, e.g. Python 2.7 or >= 3.4
python_requires = >=3.8

packages = find_namespace:
[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install POCS[google,testing]`:
focuser =
    matplotlib
    scipy
google =
    google-cloud-storage
    google-cloud-firestore
    gsutil
    protobuf==4.23.0
    rsa
testing =
    coverage
    pycodestyle
    pytest
    pytest-cov
    pytest-doctestplus
    pytest-remotedata>=0.3.1
    responses
sensors =
    streamz
weather =
    panoptes-aag

[options.entry_points]
console_scripts =
    pocs = panoptes.pocs.utils.cli.main:app

[tool:pytest]
addopts =
    --cov panoptes.pocs
    --cov tests
    --cov-branch
    --cov-report term-missing:skip-covered
    --cov-report xml:build/coverage.xml
    --no-cov-on-fail
    --doctest-modules
    --doctest-ignore-import-errors
    --doctest-modules
    -x
    -vv
norecursedirs =
    docker
    script
    resources
    dist
    build
    .tox
testpaths = tests src
doctest_optionflags = ELLIPSIS NORMALIZE_WHITESPACE ALLOW_UNICODE IGNORE_EXCEPTION_DETAIL
filterwarnings =
    ignore:elementwise == comparison failed:DeprecationWarning
    ignore::pytest.PytestDeprecationWarning
doctest_plus = enabled
markers =
    theskyx
    without_camera
    with_camera
    without_mount
    with_mount
    without_sensors
    with_sensors
    plate_solve

[aliases]
dists = bdist_wheel

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[build_sphinx]
source_dir = docs
build_dir = build/sphinx

[flake8]
# Some sane defaults for the code style checker flake8
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pycodestyle]
max-line-length = 100

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.2.3
package = pocs
extensions =
    markdown
    namespace
    no_skeleton
namespace = panoptes

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
# Have to re-enable the standard pragma
    pragma: no cover

# Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

# Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

# Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

ignore_errors = True
